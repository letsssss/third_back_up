generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id                 Int               @id @default(autoincrement())
  email              String            @unique
  password           String
  name               String?
  role               String            @default("USER")
  profileImage       String?
  phoneNumber        String?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  refreshToken       String?
  bankInfo           String?
  receivedMessages   Message[]         @relation("Receiver")
  sentMessages       Message[]         @relation("Sender")
  notifications      Notification[]
  posts              Post[]
  sales              Purchase[]        @relation("Seller")
  purchases          Purchase[]        @relation("Buyer")
  roomParticipations RoomParticipant[]
}

model Post {
  id            Int            @id @default(autoincrement())
  title         String
  content       String
  category      String         @default("GENERAL")
  productNumber String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  authorId      Int
  isDeleted     Boolean        @default(false)
  viewCount     Int            @default(0)
  eventName     String?
  eventDate     String?
  eventVenue    String?
  ticketPrice   BigInt?
  contactInfo   String?
  status        String?        @default("ACTIVE")
  notifications Notification[]
  author        User           @relation(fields: [authorId], references: [id])
  purchases     Purchase[]
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  postId    Int?
  message   String
  type      String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  post      Post?    @relation(fields: [postId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Purchase {
  id            Int       @id @default(autoincrement())
  orderNumber   String    @unique
  buyerId       Int
  sellerId      Int
  postId        Int?
  quantity      Int       @default(1)
  totalPrice    BigInt
  status        String    @default("PENDING")
  paymentMethod String?
  selectedSeats String?
  phoneNumber   String?
  ticketTitle   String?
  eventDate     String?
  eventVenue    String?
  ticketPrice   BigInt?
  imageUrl      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  messages      Message[]
  post          Post?     @relation(fields: [postId], references: [id])
  seller        User      @relation("Seller", fields: [sellerId], references: [id])
  buyer         User      @relation("Buyer", fields: [buyerId], references: [id])
  room          Room?
}

model Room {
  id              Int               @id @default(autoincrement())
  name            String            @unique
  chatInvisibleTo Int?
  lastChat        String?
  timeOfLastChat  DateTime?
  purchaseId      Int?              @unique
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  messages        Message[]
  purchase        Purchase?         @relation(fields: [purchaseId], references: [id])
  participants    RoomParticipant[]
}

model RoomParticipant {
  id       Int      @id @default(autoincrement())
  roomId   Int
  userId   Int
  joinedAt DateTime @default(now())
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  room     Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@unique([roomId, userId])
}

model Message {
  id         Int       @id @default(autoincrement())
  senderId   Int
  receiverId Int
  content    String
  isRead     Boolean   @default(false)
  createdAt  DateTime  @default(now())
  roomId     Int?
  purchaseId Int?
  purchase   Purchase? @relation(fields: [purchaseId], references: [id])
  room       Room?     @relation(fields: [roomId], references: [id])
  receiver   User      @relation("Receiver", fields: [receiverId], references: [id])
  sender     User      @relation("Sender", fields: [senderId], references: [id])

  @@index([roomId])
  @@index([senderId])
  @@index([receiverId])
}
